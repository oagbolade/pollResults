{"version":3,"sources":["components/Navbar.js","components/questions/Question1.js","components/questions/Question2.js","components/questions/Question3.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Question1","props","onChangePollingUnitID","bind","onSubmit","state","pollingUnitID","polls","e","this","setState","target","value","preventDefault","URL","axios","get","then","res","data","catch","error","console","log","DataTable","length","counter","map","poll","key","result_id","party_abbreviation","party_score","name","onChange","placeholder","onClick","scope","Component","Question2","onChangePartyNameWithID","partyNameWithID","lgas","err","SelectOptions","lga","lga_id","lga_name","Question3","onChangeEnteredBy","onChangePartyScore","enteredBy","partyScore","success","pollData","Math","ceil","random","post","role","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bc29d6db.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n      <Link to={\"/\"} className=\"navbar-brand\">\r\n        Bincom\r\n      </Link>\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarText\"\r\n        aria-controls=\"navbarText\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarText\">\r\n        <ul className=\"navbar-nav mr-auto\">\r\n          <li className=\"nav-item active\">\r\n            <Link to={\"/\"} className=\"nav-link\">\r\n              Question1 <span className=\"sr-only\">(current)</span>\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link to={\"/question2\"} className=\"nav-link\">\r\n              Question2 <span className=\"sr-only\">(current)</span>\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link to={\"/question3\"} className=\"nav-link\">\r\n              Question3 <span className=\"sr-only\">(current)</span>\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n        <span className=\"navbar-text\">INEC Polling Results</span>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"../Navbar\";\r\nimport axios from \"axios\";\r\n\r\nclass Question1 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Setting up functions\r\n    this.onChangePollingUnitID = this.onChangePollingUnitID.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    // Setting up state\r\n    this.state = {\r\n      pollingUnitID: \"\",\r\n      polls: []\r\n    };\r\n  }\r\n\r\n  onChangePollingUnitID(e) {\r\n    this.setState({ pollingUnitID: e.target.value });\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    let URL = `/pollresults/get-individual-polls/${this.state.pollingUnitID}`;\r\n    axios\r\n      .get(URL)\r\n      .then(res => {\r\n        this.setState({\r\n          polls: res.data\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    let DataTable = null;\r\n\r\n    if (this.state.polls.length > 0) {\r\n      let counter = 1;\r\n      DataTable = this.state.polls.map(poll => {\r\n        return (\r\n          <tr key={poll.result_id}>\r\n            <td>{counter++}</td>\r\n            <td>{poll.party_abbreviation}</td>\r\n            <td>{poll.party_score}</td>\r\n          </tr>\r\n        );\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <Navbar />\r\n        <div className=\"d-flex justify-content-center align-items-center container\">\r\n          <form>\r\n            <div className=\"form-group\">\r\n              <label>Enter Polling Unit ID</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"pollingUnitID\"\r\n                value={this.state.pollingUnitID}\r\n                onChange={this.onChangePollingUnitID}\r\n                className=\"form-control\"\r\n                placeholder=\"Polling Unit ID\"\r\n              />\r\n            </div>\r\n            <button onClick={this.onSubmit} className=\"btn btn-primary\">\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </div>\r\n        {DataTable ? (\r\n          <table className=\"table table-hover\">\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\">S/N</th>\r\n                <th scope=\"col\">Party Name</th>\r\n                <th scope=\"col\">Party Score</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>{DataTable}</tbody>\r\n          </table>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Question1;\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"../Navbar\";\r\nimport axios from \"axios\";\r\n\r\nclass Question2 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Setting up functions\r\n    this.onChangePartyNameWithID = this.onChangePartyNameWithID.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    // Setting up state\r\n    this.state = {\r\n      partyNameWithID: \"\",\r\n      lgas: [],\r\n      polls: []\r\n    };\r\n  }\r\n\r\n  onChangePartyNameWithID(e) {\r\n    this.setState({ partyNameWithID: e.target.value });\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    let URL = `/pollresults/lga/${this.state.partyNameWithID}`;\r\n    axios\r\n      .get(URL)\r\n      .then(res => {\r\n        this.setState({ polls: res });\r\n        console.log(res.data);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  componentDidMount() {\r\n    let URL = `/pollresults/lgas`;\r\n    axios\r\n      .get(URL)\r\n      .then(res => {\r\n        this.setState({\r\n          lgas: res.data\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    let SelectOptions = null;\r\n\r\n    if (this.state.lgas.length > 0) {\r\n      SelectOptions = this.state.lgas.map(lga => {\r\n        return (\r\n          <option value={lga.lga_id} key={lga.lga_id}>\r\n            {lga.lga_name}\r\n          </option>\r\n        );\r\n      });\r\n    }\r\n\r\n    let DataTable = null;\r\n\r\n    if (this.state.polls.length > 0) {\r\n      let counter = 1;\r\n      DataTable = this.state.polls.map(poll => {\r\n        return (\r\n          <tr key={poll.result_id}>\r\n            <td>{counter++}</td>\r\n            <td>{poll.party_abbreviation}</td>\r\n            <td>{poll.party_score}</td>\r\n          </tr>\r\n        );\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <Navbar />\r\n        <div className=\"d-flex justify-content-center align-items-center container\">\r\n          <form>\r\n            <div className=\"form-group\">\r\n              <label>Select Party</label>\r\n              <select\r\n                onChange={this.onChangePartyNameWithID}\r\n                name=\"partyNameWithID\"\r\n                className=\"form-control form-control-lg\"\r\n              >\r\n                <option>Select Party</option>\r\n                {SelectOptions}\r\n              </select>\r\n            </div>\r\n            <button onClick={this.onSubmit} className=\"btn btn-primary\">\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </div>\r\n        {DataTable ? (\r\n          <table className=\"table table-hover\">\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\">S/N</th>\r\n                <th scope=\"col\">Party Name</th>\r\n                <th scope=\"col\">Party Score</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>{DataTable}</tbody>\r\n          </table>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Question2;\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"../Navbar\";\r\nimport axios from \"axios\";\r\n\r\nclass Question3 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Setting up functions\r\n    this.onChangeEnteredBy = this.onChangeEnteredBy.bind(this);\r\n    this.onChangePollingUnitID = this.onChangePollingUnitID.bind(this);\r\n    this.onChangePartyScore = this.onChangePartyScore.bind(this);\r\n    this.onChangePartyNameWithID = this.onChangePartyNameWithID.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    // Setting up state\r\n    this.state = {\r\n      enteredBy: \"\",\r\n      pollingUnitID: \"\",\r\n      partyScore: \"\",\r\n      partyNameWithID: \"\",\r\n      error: false,\r\n      success: false,\r\n      lgas: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let URL = `/pollresults/lgas`;\r\n    axios\r\n      .get(URL)\r\n      .then(res => {\r\n        this.setState({\r\n          lgas: res.data\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  onChangePollingUnitID(e) {\r\n    this.setState({ pollingUnitID: e.target.value });\r\n  }\r\n\r\n  onChangeEnteredBy(e) {\r\n    this.setState({ enteredBy: e.target.value });\r\n  }\r\n\r\n  onChangePartyScore(e) {\r\n    this.setState({ partyScore: e.target.value });\r\n  }\r\n\r\n  onChangePartyNameWithID(e) {\r\n    this.setState({ partyNameWithID: e.target.value });\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const pollData = {\r\n      result_id: Math.ceil(Math.random() * 10000),\r\n      partyNameWithID: this.state.partyNameWithID,\r\n      pollingUnitID: this.state.pollingUnitID,\r\n      partyScore: this.state.partyScore,\r\n      enteredBy: this.state.enteredBy\r\n    };\r\n\r\n    let URL = `/pollresults/create-poll`;\r\n    axios\r\n      .post(URL, pollData)\r\n      .then(res => {\r\n        this.setState({ success: res.data.success });\r\n        console.log(res.data);\r\n      })\r\n      .catch(err => {\r\n        this.setState({ error: true });\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Navbar />\r\n        {this.state.error ? (\r\n          <div className=\"alert alert-danger\" role=\"alert\">\r\n            Your poll data could not be submitted, please try again later\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {this.state.success ? (\r\n          <div className=\"alert alert-success\" role=\"alert\">\r\n            Poll submission successfull!\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <div className=\"d-flex justify-content-center align-items-center container\">\r\n          <form>\r\n            <div className=\"form-group\">\r\n              <label>Entered by?</label>\r\n              <input\r\n                type=\"text\"\r\n                value={this.state.enteredBy}\r\n                onChange={this.onChangeEnteredBy}\r\n                name=\"enteredBy\"\r\n                className=\"form-control\"\r\n                placeholder=\"Name\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Polling Unit ID</label>\r\n              <input\r\n                type=\"text\"\r\n                value={this.state.pollingUnitID}\r\n                onChange={this.onChangePollingUnitID}\r\n                name=\"pollingUnitID\"\r\n                className=\"form-control\"\r\n                placeholder=\"ID\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Enter Party Name</label>\r\n              <input\r\n                type=\"text\"\r\n                value={this.state.partyNameWithID}\r\n                onChange={this.onChangePartyNameWithID}\r\n                name=\"partyNameWithID\"\r\n                className=\"form-control\"\r\n                placeholder=\"Party Name\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Party Score</label>\r\n              <input\r\n                type=\"text\"\r\n                value={this.state.partyScore}\r\n                onChange={this.onChangePartyScore}\r\n                name=\"partyScore\"\r\n                className=\"form-control\"\r\n                placeholder=\"Score\"\r\n              />\r\n            </div>\r\n            <button\r\n              onClick={this.onSubmit}\r\n              type=\"submit\"\r\n              className=\"btn btn-primary\"\r\n            >\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Question3;\r\n","import React from 'react';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport Question1 from \"./components/questions/Question1\";\nimport Question2 from \"./components/questions/Question2\";\nimport Question3 from \"./components/questions/Question3\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\" component={Question1} />\n          <Route path=\"/question2\" component={Question2} />\n          <Route path=\"/question3\" component={Question3} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}